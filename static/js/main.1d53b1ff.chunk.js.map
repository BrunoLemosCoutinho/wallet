{"version":3,"sources":["reducers/user.js","actions/actionTypes.js","reducers/wallet.js","reducers/index.js","store/index.js","actions/registerUser.js","actions/saveExpense.js","actions/fetchCurrenciesNames.js","actions/deleteExpense.js","pages/Login.js","components/Header.js","services/data.js","components/ExpensesForm.js","components/Expense.js","components/ExpensesTable.js","pages/Wallet.js","App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","email","user","state","action","type","userName","currencies","expenses","total","wallet","payload","expenseData","convertedBRLExpense","currenciesNames","filter","expense","id","expenseId","rootReducer","combineReducers","store","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","__REDUX_DEVTOOLS_EXTENSION__","registerUser","sendExpenseToStore","saveExpense","dispatch","a","fetch","requestResponse","json","exchangeRates","value","currency","ask","Math","round","parseFloat","fetchCurrenciesNames","formattedData","Object","keys","withoutUSDTCurrencies","deleteExpense","Login","props","validateLogin","bind","renderEnabledLoginBtn","submitLogin","emailText","passwordText","isLoginValid","this","isEmailValid","test","isPasswordValid","length","setState","event","target","name","preventDefault","logInUser","history","push","onClick","disabled","class","className","data-testid","placeholder","onChange","handleInputChange","renderDisabledLoginBtn","href","rel","React","Component","connect","data","Header","userLogin","totalExpenses","paymentMethods","categoryTags","ExpensesForm","method","tag","description","fetchCurrenciesNamesAction","addExpenseAction","previousState","htmlFor","map","currencyName","index","key","paymentMethod","category","addExpense","Expense","deleteExpenseAction","currencyRate","toFixed","ExpensesTable","Wallet","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1d53b1ff.chunk.js","sourcesContent":["// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { SAVE_USER } from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nfunction user(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case SAVE_USER:\n    return ({\n      ...state,\n      email: action.userName,\n    });\n  default:\n    return state;\n  }\n}\n\nexport default user;\n","const SAVE_USER = 'SAVE_USER';\nconst SAVE_EXPENSE = 'SAVE_EXPENSE';\nconst SAVE_CURRENCIES_NAMES = 'SAVE_CURRENCIES_NAMES';\nconst DELETE_EXPENSE = 'DELETE_EXPENSE';\n\nexport { SAVE_USER, SAVE_EXPENSE, SAVE_CURRENCIES_NAMES, DELETE_EXPENSE };\n","import {\n  SAVE_EXPENSE,\n  SAVE_CURRENCIES_NAMES,\n  DELETE_EXPENSE,\n} from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  total: 0,\n\n};\n\nfunction wallet(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case SAVE_EXPENSE:\n    return ({\n      ...state,\n      expenses: [\n        ...state.expenses,\n        action.payload.expenseData,\n      ],\n      total: state.total + action.payload.convertedBRLExpense,\n    });\n  case SAVE_CURRENCIES_NAMES:\n    return ({\n      ...state,\n      currencies: action.payload.currenciesNames,\n    });\n  case DELETE_EXPENSE:\n    return ({\n      ...state,\n      expenses: [\n        ...state.expenses.filter((expense) => (\n          expense.id !== action.payload.expenseId\n        )),\n      ],\n      total: state.total - action.payload.convertedBRLExpense,\n    });\n  default:\n    return state;\n  }\n}\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(thunk),\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n  ),\n);\n\nexport default store;\n","import { SAVE_USER } from './actionTypes';\n\nfunction registerUser(userName) {\n  const action = {\n    type: SAVE_USER,\n    userName,\n  };\n  return action;\n}\n\nexport default registerUser;\n","import { SAVE_EXPENSE } from './actionTypes';\n\nfunction sendExpenseToStore(expenseData, convertedBRLExpense) {\n  const action = {\n    type: SAVE_EXPENSE,\n    payload: {\n      expenseData,\n      convertedBRLExpense,\n    },\n  };\n  return action;\n}\n\nfunction saveExpense(expense) {\n  return async (dispatch) => {\n    const requestResponse = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const exchangeRates = await requestResponse.json();\n    // Expense conversion\n    const { value, currency } = expense;\n    const { [currency]: { ask } } = exchangeRates;\n    const convertedBRLExpense = (\n      Math.round(parseFloat(value) * parseFloat(ask) * 100)\n    ) / 100;\n    const expenseData = { ...expense, exchangeRates };\n    dispatch(sendExpenseToStore(expenseData, convertedBRLExpense));\n  };\n}\n\nexport default saveExpense;\n","import { SAVE_CURRENCIES_NAMES } from './actionTypes';\n\nfunction saveCurrenciesNamesToStore(currenciesNames) {\n  return {\n    type: SAVE_CURRENCIES_NAMES,\n    payload: {\n      currenciesNames,\n    },\n  };\n}\n\nfunction fetchCurrenciesNames() {\n  return async (dispatch) => {\n    const requestResponse = await fetch(\n      'https://economia.awesomeapi.com.br/json/all',\n    );\n    const formattedData = await requestResponse.json();\n    const currencies = Object.keys(formattedData);\n    const withoutUSDTCurrencies = currencies.filter((currency) => (\n      currency !== 'USDT'\n    ));\n\n    dispatch(saveCurrenciesNamesToStore(withoutUSDTCurrencies));\n  };\n}\n\nexport default fetchCurrenciesNames;\n","import { DELETE_EXPENSE } from './actionTypes';\n\nfunction deleteExpense(expenseId, convertedBRLExpense) {\n  const action = {\n    type: DELETE_EXPENSE,\n    payload: {\n      expenseId,\n      convertedBRLExpense,\n    },\n  };\n  return action;\n}\n\nexport default deleteExpense;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { registerUser } from '../actions';\nimport './Login.css';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.validateLogin = this.validateLogin.bind(this);\n    this.renderEnabledLoginBtn = this.renderEnabledLoginBtn.bind(this);\n    this.submitLogin = this.submitLogin.bind(this);\n    this.state = {\n      emailText: '',\n      passwordText: '',\n      isLoginValid: false,\n    };\n  }\n\n  validateLogin() {\n    const { emailText, passwordText } = this.state;\n    const minimumPasswordLength = 6;\n\n    // https://stackoverflow.com/questions/46155/how-to-validate-an-email-address-in-javascript\n    const emailRegExp = /\\S+@\\S+\\.\\S+/; // Simple pattern\n    const isEmailValid = emailRegExp.test(emailText);\n    const isPasswordValid = passwordText.length >= minimumPasswordLength;\n\n    if (isEmailValid && isPasswordValid) {\n      this.setState({ isLoginValid: true });\n    } else {\n      this.setState({ isLoginValid: false });\n    }\n  }\n\n  handleInputChange(event) {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    }, () => {\n      this.validateLogin();\n    });\n  }\n\n  submitLogin(event) {\n    event.preventDefault();\n    const { emailText } = this.state;\n    const { logInUser, history } = this.props;\n    logInUser(emailText);\n    history.push('/carteira');\n  }\n\n  renderEnabledLoginBtn() {\n    return (\n      <button\n        type=\"button\"\n        onClick={ (event) => this.submitLogin(event) }\n      >\n        Entrar\n      </button>\n    );\n  }\n\n  renderDisabledLoginBtn() {\n    return (\n      <button type=\"submit\" disabled>Entrar</button>\n    );\n  }\n\n  render() {\n    const { isLoginValid } = this.state;\n    return (\n      <div class=\"page-container\">\n        <header>\n          Wallet\n        </header>\n        <section className=\"login\">\n          <div className=\"login-container\">\n            <p>Email tipo nome@dominio.com</p>\n            <p>Senha com mais de 6 caracteres</p>\n            <input\n              id=\"teste\"\n              type=\"email\"\n              name=\"emailText\"\n              data-testid=\"email-input\"\n              placeholder=\"Digite seu email (nome@dominio.com)\"\n              onChange={ (event) => this.handleInputChange(event) }\n            />\n            <input\n              type=\"password\"\n              name=\"passwordText\"\n              data-testid=\"password-input\"\n              placeholder=\"Senha (mais de 6 caracteres)\"\n              onChange={ (event) => this.handleInputChange(event) }\n            />\n            {isLoginValid ? this.renderEnabledLoginBtn() : this.renderDisabledLoginBtn()}\n          </div>\n        </section>\n        <footer>\n          <span>\n            Bruno Lemos Coutinho\n          </span>\n          <a class=\"github\" href=\"https://github.com/BrunoLemosCoutinho\" target=\"_blank\" rel=\"noopener noreferrer\">\n            Github\n          </a>\n          <a class=\"linkedin\" href=\"https://www.linkedin.com/in/brunolemoscoutinho/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            LinkedIn\n          </a>\n        </footer>\n\n      </div>\n    );\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  const mappedProps = {\n    logInUser: (data) => dispatch(registerUser(data)),\n  };\n  return mappedProps;\n}\n\nLogin.propTypes = {\n  logInUser: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './Header.css';\n\nclass Header extends React.Component {\n  render() {\n    const { userLogin, totalExpenses } = this.props;\n    return (\n      <header class=\"header-wallet\">\n        <div className=\"email-field\">\n          <span class=\"field\">Email:</span>\n          <span data-testid=\"email-field\">\n            { userLogin }\n          </span>\n        </div>\n        <div>\n        <span class=\"field\">Despesa Total:</span>\n          <span\n            data-testid=\"total-field\"\n            value=\"0\"\n          >\n            { totalExpenses }\n          </span>\n        </div>\n        <div className=\"currency-field\">\n          <span data-testid=\"header-currency-field\">\n            BRL\n          </span>\n        </div>\n      </header>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userLogin: state.user.email,\n    totalExpenses: state.wallet.total,\n  };\n}\n\nHeader.propTypes = {\n  userLogin: PropTypes.string.isRequired,\n  totalExpenses: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","export const paymentMethods = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\nexport const categoryTags = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { paymentMethods, categoryTags } from '../services/data';\nimport { saveExpense, fetchCurrenciesNames } from '../actions';\nimport './ExpensesForm.css';\n\n/*\nDropdown binding from API inspired by\nhttps://www.carlrippon.com/react-drop-down-data-binding/\n*/\n\nclass ExpensesForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      id: 0,\n      value: 0,\n      method: paymentMethods[0],\n      tag: categoryTags[0],\n      description: '',\n      currency: 'USD',\n    };\n  }\n\n  componentDidMount() {\n    const { fetchCurrenciesNamesAction } = this.props;\n    fetchCurrenciesNamesAction();\n  }\n\n  handleInputChange(event) {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  addExpense(event) {\n    const { addExpenseAction } = this.props;\n    event.preventDefault();\n    addExpenseAction(this.state);\n    this.setState((previousState) => ({\n      id: previousState.id + 1,\n      value: 0,\n    }\n    ));\n  }\n\n  render() {\n    const {\n      value,\n      method,\n      tag,\n      description,\n      currency,\n    } = this.state;\n\n    const { currenciesNames } = this.props;\n    return (\n      <form>\n        <label htmlFor=\"value-input\">\n          Valor:\n          <input\n            class=\"form-input\"\n            type=\"number\"\n            name=\"value\"\n            id=\"value-input\"\n            data-testid=\"value-input\"\n            value={ value }\n            onChange={ (event) => this.handleInputChange(event) }\n          />\n        </label>\n        <label htmlFor=\"currency-input\">\n          Moeda:\n          <select\n            id=\"currency-input\"\n            name=\"currency\"\n            data-testid=\"currency-input\"\n            value={ currency }\n            onChange={ (event) => this.handleInputChange(event) }\n          >\n            { currenciesNames.map((currencyName, index) => (\n              <option\n                key={ index }\n                value={ currencyName }\n                data-testid={ currencyName }\n              >\n                { currencyName }\n              </option>\n            )) }\n          </select>\n        </label>\n        <label htmlFor=\"method-input\">\n          Método:\n          <select\n            id=\"method-input\"\n            name=\"method\"\n            data-testid=\"method-input\"\n            value={ method }\n            onChange={ (event) => this.handleInputChange(event) }\n          >\n            { paymentMethods.map((paymentMethod, index) => (\n              <option key={ index } value={ paymentMethod }>\n                { paymentMethod }\n              </option>\n            ))}\n          </select>\n        </label>\n        <label htmlFor=\"tag-input\">\n          Tag:\n          <select\n            id=\"tag-input\"\n            name=\"tag\"\n            data-testid=\"tag-input\"\n            value={ tag }\n            onChange={ (event) => this.handleInputChange(event) }\n          >\n            { categoryTags.map((category, index) => (\n              <option key={ index } value={ category }>\n                { category }\n              </option>\n            ))}\n          </select>\n        </label>\n        <label htmlFor=\"description-input\">\n          Descrição:\n          <input\n            class=\"form-input\"\n            type=\"text\"\n            name=\"description\"\n            id=\"description-input\"\n            data-testid=\"description-input\"\n            value={ description }\n            onChange={ (event) => this.handleInputChange(event) }\n          />\n        </label>\n        <button\n          type=\"button\"\n          onClick={ (event) => this.addExpense(event) }\n        >\n          Adicionar despesa\n        </button>\n      </form>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    currenciesNames: state.wallet.currencies,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    addExpenseAction: (expense) => dispatch(saveExpense(expense)),\n    fetchCurrenciesNamesAction: () => dispatch(fetchCurrenciesNames()),\n  };\n}\n\nExpensesForm.propTypes = {\n  addExpenseAction: PropTypes.func.isRequired,\n  currenciesNames: PropTypes.arrayOf(PropTypes.string).isRequired,\n  fetchCurrenciesNamesAction: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpensesForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteExpense } from '../actions';\nimport './Expense.css';\n\nclass Expense extends React.Component {\n  render() {\n    const { expense, deleteExpenseAction } = this.props;\n    const currencyName = expense.exchangeRates[expense.currency].name;\n    const currencyRate = parseFloat(expense.exchangeRates[expense.currency].ask);\n    const convertedBRLExpense = (expense.value * currencyRate).toFixed(2);\n    return (\n      <tr>\n        <td>{ expense.description }</td>\n        <td>{ expense.tag }</td>\n        <td>{ expense.method }</td>\n        <td>{ expense.value }</td>\n        <td>{ currencyName }</td>\n        <td>{ currencyRate.toFixed(2) }</td>\n        <td>{ convertedBRLExpense }</td>\n        <td>Real</td>\n        <td>\n          <button type=\"button\" data-testid=\"edit-btn\">Editar</button>\n          <button\n            type=\"button\"\n            data-testid=\"delete-btn\"\n            onClick={ () => deleteExpenseAction(expense.id, convertedBRLExpense) }\n          >\n            Excluir\n          </button>\n        </td>\n      </tr>\n    );\n  }\n}\n\nExpense.propTypes = {\n  expense: PropTypes.shape({\n    id: PropTypes.number,\n    description: PropTypes.string,\n    tag: PropTypes.string,\n    method: PropTypes.string,\n    value: PropTypes.string,\n    exchangeRates: PropTypes.shape(),\n    currency: PropTypes.string,\n  }).isRequired,\n  deleteExpenseAction: PropTypes.func.isRequired,\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    deleteExpenseAction: (expenseId, convertedBRLExpense) => dispatch(\n      deleteExpense(expenseId, convertedBRLExpense),\n    ),\n  };\n}\n\nexport default connect(null, mapDispatchToProps)(Expense);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Expense from './Expense';\nimport './ExpensesTable.css';\n\nclass ExpensesTable extends React.Component {\n  render() {\n    const { expenses } = this.props;\n    return (\n      <table>\n        <thead>\n          <tr class=\"header\">\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th>Editar/Excluir</th>\n          </tr>\n        </thead>\n        <tbody>\n          { expenses.map((expense) => (\n            <Expense key={ expense.id } expense={ expense } />\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    expenses: state.wallet.expenses,\n  };\n}\n\nExpensesTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.shape).isRequired,\n};\n\nexport default connect(mapStateToProps)(ExpensesTable);\n","import React from 'react';\nimport { Header, ExpensesForm, ExpensesTable } from '../components';\n\nclass Wallet extends React.Component {\n  render() {\n    return (\n      <main>\n        <Header />\n        <section>\n          <ExpensesForm />\n        </section>\n        <section>\n          <ExpensesTable />\n        </section>\n      </main>\n    );\n  }\n}\n\nexport default Wallet;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Login, Wallet } from './pages';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/carteira\" component={ Wallet } />\n    </Switch>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n  <Provider store={ store }>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}